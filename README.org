* Installation

Install [[http://arma.sourceforge.net][Armadillo++]] somehow.  On mac, something like
#+BEGIN_EXAMPLE
brew install brew install homebrew/science/armadillo
#+END_EXAMPLE
should work.

#+BEGIN_EXAMPLE

module load cmake
cmake .
make
#+END_EXAMPLE

* Usage

The main function provided has the signature
#+BEGIN_EXAMPLE
void evolve_heat_equation_2d(double *x, int n, double dx,
			     int nt, double dt, int output_interval);
#+END_EXAMPLE

This function takes an array =x= with size =(n+2) * (n+2)= and evolves the
heat equation forward by =dt*nt=. Text outputs are made into a
director called =output/= (which needs to be made before execution)
every =output_interval= time steps.


* Heat equation solver

** Spatial discretization

The centered difference approximation to the laplacian in two
dimensions is given by
\[   L u_{i,j} = \frac{u_{i-1,j} + u_{i+1,j} + u_{i,j-1} + u_{i,
j-1} - 4 u_{i,j}}{d^2}.
\]



** Time stepping

Using [[http://en.wikipedia.org/wiki/Crank%E2%80%93Nicolson_method][Crank-Nicolson]] for the time stepping. If 
\[ \dot{u} =  Lu, \]
then the scheme is written as
\[
\frac{u^{n+1} - u^{n}}{\Delta t} = \frac{1}{2} \left(
Lu^{n} + Lu^{n+1} \right).
 \] 
Collecting terms, a more practical formula to implement is 
\[ u^{n+1} = \left( I-\frac{\Delta t}{2} L  \right)^{-1} \left( I+
\frac{\Delta t}{2} L \right) u^{n}.\]


  
